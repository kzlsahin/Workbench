@page "/"

<PageTitle>File Encrypter</PageTitle>

@using FileHasher
@inject IJSRuntime JS
@inject Encrypter encrypter
@inject Decrypter decrypter

<div class="encryption-frame">


        <h1>File Encrypter</h1>
        <p>by kzlsahin</p>
    
<p @bind="promptText"></p>
    <div class="file-selection-form">
        <div class="input-group mb-3">
            <InputFile type="file" class="form-control" id="inputGroupFile02" OnChange="@LoadFiles" multiple />
            <label class="input-group-text" for="inputGroupFile02">Upload</label>
        </div>
    </div>

    <div class="password-form">
        <label for="password-init">
            Enter your key:
        </label>
        <input name="password-init" id="password-init" type="password" value="@password" @onchange="OnPassChange" placeholder="PASSWORD" />
        <label for="password-check">
            Rewrite the key:
        </label>
        <input name="password-check" id="password-check" type="password" value="@password_check" @onchange="OnPassCheckChange" placeholder="REWRITE" />
        <p id="warning-text" class="warning-text">@warning</p>
        <button @onclick="EncrypteFile">Encrypt</button>
        <button @onclick="DecrypteFile">Decrypt</button>
    </div>
</div>

<style>
    .content {
        background-color: #0E3788;
        padding: 2em;
        color: #FFFFFF;
        height: 100vh;
    }

    .encryption-frame {
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: start;
        align-items: center;
        flex-wrap: nowrap;
    }

        .encryption-frame p {
            background-color: transparent;
            color: #FFFFFF;
            width: 80%;
            max-width: 40em;
            min-height:3em;
            height: 3vh;
            border: none;
        }

    .file-selection-form {
        margin-top: 3em;
        display: block;
        width: 80vw;
        max-width: 35em;
        height: 4em;
    }


    .password-form {
        margin-top: 3vh;
        margin: auto;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: start;
        align-items: center;
        flex-wrap: nowrap;
    }

        .password-form label {
            margin-top: 1vh;
            width: 80vw;
            max-width: 25em;
        }

        .password-form input {
            width: 80vw;
            margin-top: 1vh;
            max-width: 25em;
            padding: 0.4em;
            border-radius: 0.5em;
        }

            .password-form input::placeholder {
                color: #BBBBBB;
            }

        .password-form .warning-text {
            width: 80vw;
            max-width: 25em;
            height:1em;
            text-align: left;
            color: orangered;
        }

        .password-form button {
            margin-top: 1vh;
            margin-top: 2vh;
            width: 80vw;
            max-width: 25em;
            padding: 0.4em;
            border-radius: 0.5em;
        }

            .password-form button:hover {
                background-color: gainsboro;
            }

</style>
@code {
    string? password;
    string? password_check;
    string? warning;
    string? promptText = "";
    int min_pass_length = 8;
    int max_pass_length = 15;
    private int maxAllowedFiles = 1;
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private bool isLoading;
    string fileName;
    private Stream _stream;
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        promptText += "> loading...\n";
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                promptText += "> Exception.\n";
                promptText += "> " + ex.Message + "\n";
            }
        }
        isLoading = false;
        promptText += "> loaded.\n";
    }
    protected async Task<string> GetContent()
    {
        promptText += "> laoding...\n";
        if (loadedFiles == null || loadedFiles?.Count == 0)
        {
            return string.Empty;
        }
        IBrowserFile file = loadedFiles[0];

        fileName = file.Name;
        Stream stream = file.OpenReadStream();
        StreamReader sr = new(stream);
        string content = await sr.ReadToEndAsync();
        promptText += "> laoded...\n";
        return content;
    }
    protected async void EncrypteFile()
    {
        warning = "";
        if (!CheckPasswords(password, password_check))
        {
            return;
        }
        string content = await GetContent();
        if (String.IsNullOrEmpty(content))
        {
            promptText += "> no file is laoded.\n";
            return;
        }

        promptText += "> encrypting...\n";
        _stream = encrypter.Run(ref fileName, content, password);
        promptText += "> encrypted...\n";

        DownloadFileFromStream();
    }
    protected async void DecrypteFile()
    {
        warning = "";
        if (!CheckPasswords(password, password_check))
        {
            return;
        }
        string content = await GetContent();
        if (String.IsNullOrEmpty(content))
        {
            promptText += "> no file is laoded.\n";
            return;
        }

        promptText += "> encrypting...\n";
        _stream = decrypter.Run(ref fileName, content, password);
        promptText += "> encrypted...\n";

        DownloadFileFromStream();
    }
    private async Task DownloadFileFromStream()
    {
        using var streamRef = new DotNetStreamReference(stream: _stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
    protected override async Task OnInitializedAsync()
    {
        warning = "";
    }

    protected void OnPassChange(ChangeEventArgs e)
    {
        warning = "";
        password = e.Value.ToString();
        CheckInitialPassword(password);
    }
    protected void OnPassCheckChange(ChangeEventArgs e)
    {
        warning = "";
        password_check = e.Value.ToString();
        CheckPasswords(password, password_check);
    }
    protected bool CheckInitialPassword(string pass)
    {
        if (pass.Length < min_pass_length || pass.Length > max_pass_length)
        {
            warning += $"password should be {min_pass_length}-{max_pass_length} letters in lenth!\n";
            return false;
        }
        return true;
    }

    protected bool CheckPasswords(string pass_1, string pass_2)
    {
        if (!CheckInitialPassword(pass_1))
        {
            return false;
        }
        if (!pass_1.Equals(pass_2))
        {
            warning += "passwords do not match\n";
            return false;
        }
        return true;
    }
}
